/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v2/projects/namespaces/{id}": {
    put: operations["update_1"];
  };
  "/v2/projects/keys/{keyId}/tags": {
    put: operations["tagKey_1"];
  };
  "/v2/projects/keys/{id}/complex-update": {
    put: operations["complexEdit_1"];
  };
  "/v2/projects/keys/{id}": {
    put: operations["edit_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/translations/{translationId}/resolve/set-override": {
    /** Resolves translation conflict. The old translation will be overridden. */
    put: operations["resolveTranslationSetOverride_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/translations/{translationId}/resolve/set-keep-existing": {
    /** Resolves translation conflict. The old translation will be kept. */
    put: operations["resolveTranslationSetKeepExisting_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/resolve-all/set-override": {
    /** Resolves all translation conflicts for provided language. The old translations will be overridden. */
    put: operations["resolveTranslationSetOverride_3"];
  };
  "/v2/projects/import/result/languages/{languageId}/resolve-all/set-keep-existing": {
    /** Resolves all translation conflicts for provided language. The old translations will be kept. */
    put: operations["resolveTranslationSetKeepExisting_3"];
  };
  "/v2/projects/import/result/languages/{importLanguageId}/select-existing/{existingLanguageId}": {
    /** Sets existing language to pair with language to import. Data will be imported to selected existing language when applied. */
    put: operations["selectExistingLanguage_1"];
  };
  "/v2/projects/import/result/languages/{importLanguageId}/reset-existing": {
    /** Resets existing language paired with language to import. */
    put: operations["resetExistingLanguage_1"];
  };
  "/v2/projects/import/result/files/{fileId}/select-namespace": {
    /** Sets namespace for file to import. */
    put: operations["selectNamespace_1"];
  };
  "/v2/projects/import/apply": {
    /** Imports the data prepared in previous step */
    put: operations["applyImport_1"];
  };
  "/v2/projects/translations/{translationId}/set-state/{state}": {
    put: operations["setTranslationState_1"];
  };
  "/v2/projects/translations/{translationId}/comments/{commentId}/set-state/{state}": {
    put: operations["setState_1"];
  };
  "/v2/projects/translations/{translationId}/comments/{commentId}": {
    get: operations["get_4"];
    put: operations["update_3"];
    delete: operations["delete_6"];
  };
  "/v2/projects/translations/{translationId}/set-outdated-flag/{state}": {
    put: operations["setOutdated_1"];
  };
  "/v2/projects/translations/{translationId}/dismiss-auto-translated-state": {
    put: operations["dismissAutoTranslatedState_1"];
  };
  "/v2/projects/translations": {
    get: operations["getTranslations_1"];
    put: operations["setTranslations_1"];
    post: operations["createOrUpdateTranslations_1"];
  };
  "/v2/projects/languages/{languageId}": {
    put: operations["editLanguage_1"];
    delete: operations["deleteLanguage_3"];
  };
  "/v2/projects/keys/{keyId}/auto-translate": {
    /**
     * Uses enabled auto-translation methods.
     * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
     *
     * This will replace the the existing translation with the result obtained from specified source!
     */
    put: operations["autoTranslate_1"];
  };
  "/v2/projects/keys/info": {
    post: operations["getInfo_1"];
  };
  "/v2/projects/keys/import-resolvable": {
    post: operations["importKeys_1"];
  };
  "/v2/projects/keys/import": {
    post: operations["importKeys_3"];
  };
  "/v2/projects/keys/create": {
    post: operations["create_2"];
  };
  "/v2/projects/keys": {
    get: operations["getAll_4"];
    post: operations["create_3"];
    delete: operations["delete_4"];
  };
  "/v2/projects/import": {
    /** Prepares provided files to import. */
    post: operations["addFiles_1"];
    /** Deletes prepared import data. */
    delete: operations["cancelImport_1"];
  };
  "/v2/projects/export": {
    get: operations["export_1"];
    post: operations["exportPost_1"];
  };
  "/v2/projects/translations/{translationId}/comments": {
    get: operations["getAll_6"];
    post: operations["create_5"];
  };
  "/v2/projects/translations/create-comment": {
    post: operations["create_7"];
  };
  "/v2/projects/suggest/translation-memory": {
    post: operations["suggestTranslationMemory_1"];
  };
  "/v2/projects/suggest/machine-translations": {
    post: operations["suggestMachineTranslations_1"];
  };
  "/v2/projects/languages": {
    get: operations["getAll_8"];
    post: operations["createLanguage_1"];
  };
  "/v2/projects/keys/{keyId}/screenshots": {
    get: operations["getKeyScreenshots"];
    post: operations["uploadScreenshot"];
  };
  "/v2/image-upload": {
    post: operations["upload"];
  };
  "/v2/projects/used-namespaces": {
    get: operations["getUsedNamespaces_1"];
  };
  "/v2/projects/tags": {
    get: operations["getAll_2"];
  };
  "/v2/projects/namespaces": {
    get: operations["getAllNamespaces_1"];
  };
  "/v2/projects/namespace-by-name/{name}": {
    get: operations["getByName_1"];
  };
  "/v2/projects/keys/search": {
    get: operations["searchForKey_1"];
  };
  "/v2/projects/activity": {
    get: operations["getActivity_1"];
  };
  "/v2/projects/import/result/languages/{languageId}/translations": {
    /** Returns translations prepared to import. */
    get: operations["getImportTranslations_1"];
  };
  "/v2/projects/import/result/languages/{languageId}": {
    /** Returns language prepared to import. */
    get: operations["getImportLanguage_1"];
    /** Deletes language prepared to import. */
    delete: operations["deleteLanguage_1"];
  };
  "/v2/projects/import/result/files/{importFileId}/issues": {
    /** Returns issues for uploaded file. */
    get: operations["getImportFileIssues_1"];
  };
  "/v2/projects/import/result": {
    /** Returns the result of preparation. */
    get: operations["getImportResult_1"];
  };
  "/v2/projects/import/all-namespaces": {
    /** Returns all existing and imported namespaces */
    get: operations["getAllNamespaces_3"];
  };
  "/v2/projects/translations/{translationId}/history": {
    get: operations["getTranslationHistory_1"];
  };
  "/v2/projects/translations/{languages}": {
    get: operations["getAllTranslations_1"];
  };
  "/v2/projects/translations/select-all": {
    get: operations["getSelectAllKeyIds_1"];
  };
  "/v2/projects/stats/daily-activity": {
    get: operations["getProjectDailyActivity_1"];
  };
  "/v2/projects/stats": {
    get: operations["getProjectStats_1"];
  };
  "/v2/api-keys/current": {
    get: operations["getCurrent_1"];
  };
  "/api/project/export/jsonZip": {
    get: operations["doExportJsonZip_1"];
  };
  "/v2/projects/keys/{keyId}/tags/{tagId}": {
    delete: operations["removeTag_1"];
  };
  "/v2/projects/keys/{ids}": {
    delete: operations["delete_2"];
  };
  "/v2/projects/keys/{keyId}/screenshots/{ids}": {
    delete: operations["deleteScreenshots"];
  };
  "/v2/image-upload/{ids}": {
    delete: operations["delete_9"];
  };
}

export interface components {
  schemas: {
    UserUpdateRequestDto: {
      name: string;
      email: string;
      currentPassword?: string;
      /** @description Callback url for link sent in e-mail. This may be omitted, when server has set frontEndUrl in properties. */
      callbackUrl?: string;
    };
    Avatar: {
      large: string;
      thumbnail: string;
    };
    Links: { [key: string]: components["schemas"]["Link"] };
    PrivateUserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      emailAwaitingVerification?: string;
      mfaEnabled: boolean;
      avatar?: components["schemas"]["Avatar"];
      accountType: "LOCAL" | "LDAP" | "THIRD_PARTY";
      globalServerRole: "USER" | "ADMIN";
      deletable: boolean;
      needsSuperJwtToken: boolean;
    };
    UserUpdatePasswordRequestDto: {
      currentPassword: string;
      password: string;
    };
    JwtAuthenticationResponse: {
      accessToken?: string;
      tokenType?: string;
    };
    UserTotpEnableRequestDto: {
      totpKey: string;
      otp: string;
      password: string;
    };
    UserMfaRecoveryRequestDto: {
      password: string;
    };
    EditProjectDTO: {
      name: string;
      slug?: string;
      /** Format: int64 */
      baseLanguageId?: number;
      description?: string;
    };
    LanguageModel: {
      /** Format: int64 */
      id: number;
      /**
       * @description Language name in english
       * @example Czech
       */
      name?: string;
      /**
       * @description Language tag according to BCP 47 definition
       * @example cs-CZ
       */
      tag?: string;
      /**
       * @description Language name in this language
       * @example ƒçe≈°tina
       */
      originalName?: string;
      /**
       * @description Language flag emoji as UTF-8 emoji
       * @example üá®üáø
       */
      flagEmoji?: string;
      /** @description Whether is base language of project */
      base?: boolean;
    };
    ProjectModel: {
      /** Format: int64 */
      id: number;
      name: string;
      description?: string;
      slug?: string;
      avatar?: components["schemas"]["Avatar"];
      organizationOwner?: components["schemas"]["SimpleOrganizationModel"];
      baseLanguage?: components["schemas"]["LanguageModel"];
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerName?: string;
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerSlug?: string;
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerBasePermissions?:
        | "VIEW"
        | "TRANSLATE"
        | "EDIT"
        | "MANAGE";
      organizationRole?: "MEMBER" | "OWNER";
      /**
       * @description Current user's direct permission
       * @example MANAGE
       */
      directPermissions?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      computedPermissions: components["schemas"]["UserPermissionModel"];
    };
    SimpleOrganizationModel: {
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name?: string;
      /** @example btforg */
      slug?: string;
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      basePermissions: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      avatar?: components["schemas"]["Avatar"];
    };
    UserPermissionModel: {
      /**
       * @description List of languages current user has TRANSLATE permission to. If null, all languages edition is permitted.
       * @example 200001,200004
       */
      permittedLanguageIds?: number[];
      /**
       * @description The type of permission.
       * @example EDIT
       */
      type?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
    UpdateNamespaceDto: {
      name: string;
    };
    NamespaceModel: {
      /**
       * Format: int64
       * @description The id of namespace
       * @example 10000048
       */
      id?: number;
      /** @example homepage */
      name?: string;
    };
    MachineTranslationLanguagePropsDto: {
      /**
       * Format: int64
       * @description The language to apply those rules. If null, then this settings are default.
       */
      targetLanguageId?: number;
      /** @description This service will be used for automated translation */
      primaryService?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU";
      /** @description List of enabled services */
      enabledServices?: ("GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU")[];
    };
    SetMachineTranslationSettingsDto: {
      settings: components["schemas"]["MachineTranslationLanguagePropsDto"][];
    };
    CollectionModelLanguageConfigItemModel: {
      _embedded?: {
        languageConfigs?: components["schemas"]["LanguageConfigItemModel"][];
      };
    };
    LanguageConfigItemModel: {
      /**
       * Format: int64
       * @description When null, its a default configuration applied to not configured languages
       */
      targetLanguageId?: number;
      /** @description When null, its a default configuration applied to not configured languages */
      targetLanguageTag?: string;
      /** @description When null, its a default configuration applied to not configured languages */
      targetLanguageName?: string;
      /** @description Service used for automated translating */
      primaryService?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU";
      /** @description Services to be used for suggesting */
      enabledServices?: ("GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU")[];
    };
    TagKeyDto: {
      name: string;
    };
    TagModel: {
      /** Format: int64 */
      id: number;
      name: string;
    };
    ComplexEditKeyDto: {
      /** @description Name of the key */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /** @description Translations to update */
      translations?: { [key: string]: string };
      /** @description Tags of the key. If not provided tags won't be modified */
      tags?: string[];
      /** @description IDs of screenshots to delete */
      screenshotIdsToDelete?: number[];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: number[];
      screenshotsToAdd?: components["schemas"]["KeyScreenshotDto"][];
    };
    KeyInScreenshotPositionDto: {
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
    };
    KeyScreenshotDto: {
      text?: string;
      /**
       * Format: int64
       * @description Ids of screenshot uploaded with /v2/image-upload endpoint
       */
      uploadedImageId?: number;
      positions?: components["schemas"]["KeyInScreenshotPositionDto"][];
    };
    KeyInScreenshotModel: {
      /** Format: int64 */
      keyId: number;
      position?: components["schemas"]["KeyInScreenshotPosition"];
      keyName: string;
      keyNamespace?: string;
      originalText?: string;
    };
    KeyInScreenshotPosition: {
      /** Format: int32 */
      x: number;
      /** Format: int32 */
      y: number;
      /** Format: int32 */
      width: number;
      /** Format: int32 */
      height: number;
    };
    KeyWithDataModel: {
      /**
       * Format: int64
       * @description Id of key record
       */
      id?: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      name?: string;
      /**
       * @description Namespace of key
       * @example homepage
       */
      namespace?: string;
      /**
       * @description Translations object containing values updated in this request
       * @example [object Object]
       */
      translations?: {
        [key: string]: components["schemas"]["TranslationModel"];
      };
      /** @description Tags of key */
      tags?: components["schemas"]["TagModel"][];
      /** @description Screenshots of the key */
      screenshots?: components["schemas"]["ScreenshotModel"][];
    };
    /** @description Screenshots of the key */
    ScreenshotModel: {
      /** Format: int64 */
      id: number;
      /**
       * @description File name, which may be downloaded from the screenshot path.
       *
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      filename?: string;
      /**
       * @description Thumbnail file name, which may be downloaded from the screenshot path.
       *
       * When images are secured. Encrypted timestamp is appended to the filename.
       */
      thumbnail?: string;
      fileUrl: string;
      thumbnailUrl: string;
      /** Format: date-time */
      createdAt?: string;
      keyReferences: components["schemas"]["KeyInScreenshotModel"][];
      location?: string;
      /** Format: int32 */
      width?: number;
      /** Format: int32 */
      height?: number;
    };
    /**
     * @description Translations object containing values updated in this request
     * @example [object Object]
     */
    TranslationModel: {
      /**
       * Format: int64
       * @description Id of translation record
       */
      id?: number;
      /** @description Translation text */
      text?: string;
      /** @description State of translation */
      state?: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      /** @description Whether base language translation was changed after this translation was updated */
      outdated?: boolean;
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto?: boolean;
      /** @description Which machine translation service was used to auto translate this */
      mtProvider?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU";
    };
    EditKeyDto: {
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
    };
    KeyModel: {
      /**
       * Format: int64
       * @description Id of key record
       */
      id?: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      name?: string;
      /**
       * @description Namespace of key
       * @example homepage
       */
      namespace?: string;
    };
    ProjectInviteUserDto: {
      type: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      /**
       * @description IDs of languages to allow user to translate to with TRANSLATE permission.
       *
       * Only applicable when type is TRANSLATE, otherwise 400 - Bad Request is returned.
       */
      languages?: number[];
      /** @description Email to send invitation to */
      email?: string;
      /** @description Name of invited user */
      name?: string;
    };
    ProjectInvitationModel: {
      /** Format: int64 */
      id: number;
      code: string;
      type: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      permittedLanguageIds?: number[];
      /** Format: date-time */
      createdAt: string;
      invitedUserName?: string;
      invitedUserEmail?: string;
    };
    AutoTranslationSettingsDto: {
      /** @description If true, new keys will be automatically translated using translation memory when 100% match is found */
      usingTranslationMemory?: boolean;
      /** @description If true, new keys will be automatically translated using primary machine translation service.When "usingTranslationMemory" is enabled, it tries to translate it with translation memory first. */
      usingMachineTranslation?: boolean;
    };
    SetFileNamespaceRequest: {
      namespace?: string;
    };
    TranslationCommentModel: {
      /**
       * Format: int64
       * @description Id of translation comment record
       */
      id?: number;
      /** @description Text of comment */
      text?: string;
      /** @description State of translation */
      state?: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      author?: components["schemas"]["UserAccountModel"];
      /**
       * Format: date-time
       * @description Date when it was created
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description Date when it was updated
       */
      updatedAt?: string;
    };
    /** @description User who created the comment */
    UserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      emailAwaitingVerification?: string;
      avatar?: components["schemas"]["Avatar"];
      globalServerRole: "USER" | "ADMIN";
      deleted: boolean;
    };
    TranslationCommentDto: {
      text: string;
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
    };
    SetTranslationsWithKeyDto: {
      /**
       * @description Key name to set translations for
       * @example what_a_key_to_translate
       */
      key: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Object mapping language tag to translation
       * @example [object Object]
       */
      translations: { [key: string]: string };
      /**
       * @description List of languages to return translations for.
       *
       * If not provided, only modified translation will be provided.
       *
       * @example en,de,fr
       */
      languagesToReturn?: string[];
    };
    SetTranslationsResponseModel: {
      /**
       * Format: int64
       * @description Id of key record
       */
      keyId?: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      keyName?: string;
      /**
       * @description The namespace of the key
       * @example homepage
       */
      keyNamespace?: string;
      /**
       * @description Translations object containing values updated in this request
       * @example [object Object]
       */
      translations?: {
        [key: string]: components["schemas"]["TranslationModel"];
      };
    };
    LanguageDto: {
      /**
       * @description Language name in english
       * @example Czech
       */
      name: string;
      /**
       * @description Language tag according to BCP 47 definition
       * @example cs-CZ
       */
      originalName: string;
      /**
       * @description Language name in this language
       * @example ƒçe≈°tina
       */
      tag: string;
      /**
       * @description Language flag emoji as UTF-8 emoji
       * @example üá®üáø
       */
      flagEmoji?: string;
    };
    UpdatePatDto: {
      /** @description New description of the PAT */
      description: string;
    };
    PatModel: {
      /** Format: int64 */
      id: number;
      description: string;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      createdAt: number;
      /** Format: int64 */
      updatedAt: number;
      /** Format: int64 */
      lastUsedAt?: number;
    };
    RegeneratePatDto: {
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null key never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    RevealedPatModel: {
      token: string;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      lastUsedAt?: number;
      description: string;
      /** Format: int64 */
      createdAt: number;
      /** Format: int64 */
      updatedAt: number;
    };
    SetOrganizationRoleDto: {
      roleType: "MEMBER" | "OWNER";
    };
    OrganizationDto: {
      /** @example Beautiful organization */
      name: string;
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      /** @example btforg */
      slug?: string;
      basePermissions: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
    };
    OrganizationModel: {
      /** Format: int64 */
      id: number;
      /** @example Beautiful organization */
      name?: string;
      /** @example btforg */
      slug?: string;
      /** @example This is a beautiful organization full of beautiful and clever people */
      description?: string;
      basePermissions: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      /**
       * @description The role of currently authorized user.
       *
       * Can be null when user has direct access to one of the projects owned by the organization.
       */
      currentUserRole?: "MEMBER" | "OWNER";
      avatar?: components["schemas"]["Avatar"];
    };
    OrganizationInviteUserDto: {
      roleType: "MEMBER" | "OWNER";
      /** @description Name of invited user */
      name?: string;
      /** @description Email to send invitation to */
      email?: string;
    };
    OrganizationInvitationModel: {
      /** Format: int64 */
      id: number;
      code: string;
      type: "MEMBER" | "OWNER";
      /** Format: date-time */
      createdAt: string;
      invitedUserName?: string;
      invitedUserEmail?: string;
    };
    V2EditApiKeyDto: {
      scopes: string[];
      description?: string;
    };
    ApiKeyModel: {
      /**
       * Format: int64
       * @description ID of the API key
       */
      id?: number;
      /** @description Description */
      description?: string;
      /** @description Username of user owner */
      username?: string;
      /** @description Full name of user owner */
      userFullName?: string;
      /**
       * Format: int64
       * @description Api key's project ID
       */
      projectId?: number;
      /** @description Api key's project name */
      projectName?: string;
      /**
       * Format: int64
       * @description Timestamp of API key expiraion
       */
      expiresAt?: number;
      /**
       * Format: int64
       * @description Timestamp of API key last usage
       */
      lastUsedAt?: number;
      /**
       * @description Api key's permission scopes
       * @example screenshots.upload,screenshots.delete,translations.edit,screenshots.view,translations.view,keys.edit
       */
      scopes?: string[];
    };
    RegenerateApiKeyDto: {
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null key never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    RevealedApiKeyModel: {
      /** @description Resulting user's api key */
      key?: string;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      projectId: number;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      lastUsedAt?: number;
      description: string;
      username?: string;
      scopes: string[];
      userFullName?: string;
      projectName: string;
    };
    SuperTokenRequest: {
      /** @description Has to be provided when TOTP enabled */
      otp?: string;
      /** @description Has to be provided when TOTP not enabled */
      password?: string;
    };
    GenerateSlugDto: {
      name: string;
      oldSlug?: string;
    };
    CreateProjectDTO: {
      name: string;
      languages: components["schemas"]["LanguageDto"][];
      /** @description Slug of your project used in url e.g. "/v2/projects/what-a-project". If not provided, it will be generated */
      slug?: string;
      /**
       * Format: int64
       * @description Organization to create the project in
       */
      organizationId?: number;
      /** @description Tag of one of created languages, to select it as base language. If not provided, first language will be selected as base. */
      baseLanguageTag?: string;
    };
    GetKeysRequestDto: {
      keys: components["schemas"]["KeyDefinitionDto"][];
      /** @description Tags to return language translations in */
      languageTags: string[];
    };
    KeyDefinitionDto: {
      name: string;
      namespace?: string;
    };
    CollectionModelKeyWithDataModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyWithDataModel"][];
      };
    };
    ImportKeysResolvableDto: {
      keys: components["schemas"]["ImportKeysResolvableItemDto"][];
    };
    ImportKeysResolvableItemDto: {
      /**
       * @description Key name to set translations for
       * @example what_a_key_to_translate
       */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      screenshots?: components["schemas"]["KeyScreenshotDto"][];
      /** @description Object mapping language tag to translation */
      translations: {
        [key: string]: components["schemas"]["ImportTranslationResolvableDto"];
      };
    };
    /** @description Object mapping language tag to translation */
    ImportTranslationResolvableDto: {
      /**
       * @description Translation text
       * @example Hello! I am a translation!
       */
      text?: string;
      /**
       * @description Determines, how conflict is resolved.
       *
       * - KEEP: Translation is not changed
       * - OVERRIDE: Translation is overridden
       * - NEW: New translation is created)
       *
       * @example Hello! I am a translation!
       */
      resolution?: "KEEP" | "OVERRIDE" | "NEW";
    };
    KeyImportResolvableResultModel: {
      /** @description List of keys */
      keys?: components["schemas"]["KeyModel"][];
      /** @description Map uploadedImageId to screenshot */
      screenshots?: { [key: string]: components["schemas"]["ScreenshotModel"] };
    };
    ImportKeysDto: {
      keys: components["schemas"]["ImportKeysItemDto"][];
    };
    ImportKeysItemDto: {
      /**
       * @description Key name to set translations for
       * @example what_a_key_to_translate
       */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      /**
       * @description Object mapping language tag to translation
       * @example [object Object]
       */
      translations: { [key: string]: string };
      /**
       * @description Tags of the key
       * @example homepage,user-profile
       */
      tags?: string[];
    };
    CreateKeyDto: {
      /** @description Name of the key */
      name: string;
      /** @description The namespace of the key. (When empty or null default namespace will be used) */
      namespace?: string;
      translations?: { [key: string]: string };
      tags?: string[];
      /** @description Ids of screenshots uploaded with /v2/image-upload endpoint */
      screenshotUploadedImageIds?: number[];
      screenshots?: components["schemas"]["KeyScreenshotDto"][];
    };
    ErrorResponseBody: {
      code: string;
      params?: { [key: string]: unknown }[];
    };
    ImportAddFilesResultModel: {
      errors: components["schemas"]["ErrorResponseBody"][];
      result?: components["schemas"]["PagedModelImportLanguageModel"];
    };
    ImportLanguageModel: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int64 */
      existingLanguageId?: number;
      existingLanguageTag?: string;
      existingLanguageAbbreviation?: string;
      existingLanguageName?: string;
      importFileName: string;
      /** Format: int64 */
      importFileId: number;
      /** Format: int32 */
      importFileIssueCount: number;
      namespace?: string;
      /** Format: int32 */
      totalCount: number;
      /** Format: int32 */
      conflictCount: number;
      /** Format: int32 */
      resolvedCount: number;
    };
    PageMetadata: {
      /** Format: int64 */
      size?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int64 */
      totalPages?: number;
      /** Format: int64 */
      number?: number;
    };
    PagedModelImportLanguageModel: {
      _embedded?: {
        languages?: components["schemas"]["ImportLanguageModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ExportParams: {
      languages?: string[];
      format: "JSON" | "XLIFF";
      structureDelimiter?: string;
      filterKeyId?: number[];
      filterKeyIdNot?: number[];
      filterTag?: string;
      filterKeyPrefix?: string;
      filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED")[];
      filterNamespace?: string[];
      zip: boolean;
    };
    StreamingResponseBody: { [key: string]: unknown };
    TranslationCommentWithLangKeyDto: {
      /** Format: int64 */
      keyId: number;
      /** Format: int64 */
      languageId: number;
      text: string;
      state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
    };
    TranslationWithCommentModel: {
      translation: components["schemas"]["TranslationModel"];
      comment: components["schemas"]["TranslationCommentModel"];
    };
    SuggestRequestDto: {
      /**
       * Format: int64
       * @description Key Id to get results for. Use when key is stored already.
       */
      keyId?: number;
      /** Format: int64 */
      targetLanguageId: number;
      /** @description Text value of base translation. Useful, when base translation is not stored yet. */
      baseText?: string;
    };
    PagedModelTranslationMemoryItemModel: {
      _embedded?: {
        translationMemoryItems?: components["schemas"]["TranslationMemoryItemModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    TranslationMemoryItemModel: {
      targetText: string;
      baseText: string;
      keyName: string;
      /** Format: float */
      similarity: number;
    };
    SuggestResultModel: {
      /**
       * @description Results provided by enabled services
       * @example [object Object]
       */
      machineTranslations?: { [key: string]: string };
      /** Format: int64 */
      translationCreditsBalanceBefore: number;
      /** Format: int64 */
      translationCreditsBalanceAfter: number;
      /**
       * Format: int64
       * @description Extra credits are neither refilled nor reset every period. User's can refill them on Tolgee cloud.
       */
      translationExtraCreditsBalanceBefore?: number;
      /**
       * Format: int64
       * @description Extra credits are neither refilled nor reset every period. User's can refill them on Tolgee cloud.
       */
      translationExtraCreditsBalanceAfter?: number;
    };
    ScreenshotInfoDto: {
      text?: string;
      positions?: components["schemas"]["KeyInScreenshotPositionDto"][];
      location?: string;
    };
    CreatePatDto: {
      /** @description Description of the PAT */
      description: string;
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null, token never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    ImageUploadInfoDto: {
      location?: string;
    };
    UploadedImageModel: {
      /** Format: int64 */
      id: number;
      filename: string;
      fileUrl: string;
      requestFilename: string;
      /** Format: date-time */
      createdAt: string;
      location?: string;
    };
    CreateApiKeyDto: {
      /** Format: int64 */
      projectId: number;
      scopes: string[];
      /** @description Description of the project API key */
      description?: string;
      /**
       * Format: int64
       * @description Expiration date in epoch format (milliseconds). When null key never expires.
       * @example 1661172869000
       */
      expiresAt?: number;
    };
    TextNode: { [key: string]: unknown };
    SignUpDto: {
      name: string;
      email: string;
      organizationName?: string;
      password: string;
      invitationCode?: string;
      callbackUrl?: string;
      recaptchaToken?: string;
    };
    ResetPassword: {
      email: string;
      code: string;
      password?: string;
    };
    ResetPasswordRequest: {
      callbackUrl: string;
      email: string;
    };
    LoginRequest: {
      username: string;
      password: string;
      otp?: string;
    };
    CollectionModelSimpleOrganizationModel: {
      _embedded?: {
        organizations?: components["schemas"]["SimpleOrganizationModel"][];
      };
    };
    UserPreferencesModel: {
      language?: string;
      /** Format: int64 */
      preferredOrganizationId?: number;
    };
    AuthMethodsDTO: {
      github: components["schemas"]["OAuthPublicConfigDTO"];
      google: components["schemas"]["OAuthPublicConfigDTO"];
      oauth2: components["schemas"]["OAuthPublicExtendsConfigDTO"];
    };
    InitialDataModel: {
      serverConfiguration: components["schemas"]["PublicConfigurationDTO"];
      userInfo?: components["schemas"]["PrivateUserAccountModel"];
      preferredOrganization?: components["schemas"]["OrganizationModel"];
      languageTag?: string;
    };
    MtServiceDTO: {
      enabled: boolean;
      defaultEnabledForProject: boolean;
    };
    MtServicesDTO: {
      defaultPrimaryService?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU";
      services: { [key: string]: components["schemas"]["MtServiceDTO"] };
    };
    OAuthPublicConfigDTO: {
      clientId?: string;
      enabled: boolean;
    };
    OAuthPublicExtendsConfigDTO: {
      clientId?: string;
      authorizationUrl?: string;
      scopes?: string[];
      enabled: boolean;
    };
    PublicBillingConfigurationDTO: {
      enabled: boolean;
    };
    PublicConfigurationDTO: {
      machineTranslationServices: components["schemas"]["MtServicesDTO"];
      billing: components["schemas"]["PublicBillingConfigurationDTO"];
      authentication: boolean;
      authMethods?: components["schemas"]["AuthMethodsDTO"];
      passwordResettable: boolean;
      allowRegistrations: boolean;
      screenshotsUrl: string;
      /** Format: int32 */
      maxUploadFileSize: number;
      clientSentryDsn?: string;
      needsEmailVerification: boolean;
      userCanCreateOrganizations: boolean;
      appName: string;
      version: string;
      showVersion: boolean;
      /** Format: int64 */
      maxTranslationTextLength: number;
      recaptchaSiteKey?: string;
      openReplayApiKey?: string;
      chatwootToken?: string;
      capterraTracker?: string;
    };
    PagedModelProjectModel: {
      _embedded?: {
        projects?: components["schemas"]["ProjectModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelUserAccountInProjectModel: {
      _embedded?: {
        users?: components["schemas"]["UserAccountInProjectModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    UserAccountInProjectModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      organizationRole?: "MEMBER" | "OWNER";
      organizationBasePermissions?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      directPermissions?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      computedPermissions?: components["schemas"]["UserPermissionModel"];
    };
    CollectionModelUsedNamespaceModel: {
      _embedded?: {
        namespaces?: components["schemas"]["UsedNamespaceModel"][];
      };
    };
    UsedNamespaceModel: {
      /**
       * Format: int64
       * @description The id of namespace. Null for default namespace.
       * @example 10000048
       */
      id?: number;
      /**
       * @description Name of namespace. Null if default.
       * @example homepage
       */
      name?: string;
    };
    PagedModelTagModel: {
      _embedded?: {
        tags?: components["schemas"]["TagModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelNamespaceModel: {
      _embedded?: {
        namespaces?: components["schemas"]["NamespaceModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CreditBalanceModel: {
      /** Format: int64 */
      creditBalance: number;
      /** Format: int64 */
      bucketSize: number;
      /** Format: int64 */
      extraCreditBalance: number;
    };
    KeySearchResultView: {
      name: string;
      /** Format: int64 */
      id: number;
      translation?: string;
      namespace?: string;
      baseTranslation?: string;
    };
    KeySearchSearchResultModel: {
      view?: components["schemas"]["KeySearchResultView"];
      name: string;
      /** Format: int64 */
      id: number;
      translation?: string;
      namespace?: string;
      baseTranslation?: string;
    };
    PagedModelKeySearchSearchResultModel: {
      _embedded?: {
        keys?: components["schemas"]["KeySearchSearchResultModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelKeyModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelKeyModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyModel"][];
      };
    };
    EntityDescriptionWithRelations: {
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      data: { [key: string]: { [key: string]: unknown } };
    };
    ExistenceEntityDescription: {
      entityClass: string;
      /** Format: int64 */
      entityId: number;
      data: { [key: string]: { [key: string]: unknown } };
      relations: {
        [key: string]: components["schemas"]["EntityDescriptionWithRelations"];
      };
      exists?: boolean;
    };
    ModifiedEntityModel: {
      /** Format: int64 */
      entityId: number;
      description?: { [key: string]: { [key: string]: unknown } };
      modifications?: {
        [key: string]: components["schemas"]["PropertyModification"];
      };
      relations?: {
        [key: string]: components["schemas"]["ExistenceEntityDescription"];
      };
      exists?: boolean;
    };
    PagedModelProjectActivityModel: {
      _embedded?: {
        activities?: components["schemas"]["ProjectActivityModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ProjectActivityAuthorModel: {
      /** Format: int64 */
      id: number;
      username?: string;
      name?: string;
      avatar?: components["schemas"]["Avatar"];
      deleted: boolean;
    };
    ProjectActivityModel: {
      /** Format: int64 */
      revisionId: number;
      /** Format: int64 */
      timestamp: number;
      type:
        | "UNKNOWN"
        | "SET_TRANSLATION_STATE"
        | "SET_TRANSLATIONS"
        | "DISMISS_AUTO_TRANSLATED_STATE"
        | "SET_OUTDATED_FLAG"
        | "TRANSLATION_COMMENT_ADD"
        | "TRANSLATION_COMMENT_DELETE"
        | "TRANSLATION_COMMENT_EDIT"
        | "TRANSLATION_COMMENT_SET_STATE"
        | "SCREENSHOT_DELETE"
        | "SCREENSHOT_ADD"
        | "KEY_TAGS_EDIT"
        | "KEY_NAME_EDIT"
        | "KEY_DELETE"
        | "CREATE_KEY"
        | "COMPLEX_EDIT"
        | "IMPORT"
        | "CREATE_LANGUAGE"
        | "EDIT_LANGUAGE"
        | "DELETE_LANGUAGE"
        | "CREATE_PROJECT"
        | "EDIT_PROJECT"
        | "NAMESPACE_EDIT";
      author?: components["schemas"]["ProjectActivityAuthorModel"];
      modifiedEntities?: {
        [key: string]: components["schemas"]["ModifiedEntityModel"][];
      };
      meta?: { [key: string]: { [key: string]: unknown } };
      counts?: { [key: string]: number };
    };
    PropertyModification: {
      old?: { [key: string]: unknown };
      new?: { [key: string]: unknown };
    };
    ImportTranslationModel: {
      /** Format: int64 */
      id: number;
      text?: string;
      keyName: string;
      /** Format: int64 */
      keyId: number;
      /** Format: int64 */
      conflictId?: number;
      conflictText?: string;
      override: boolean;
      resolved: boolean;
    };
    PagedModelImportTranslationModel: {
      _embedded?: {
        translations?: components["schemas"]["ImportTranslationModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    EntityModelImportFileIssueView: {
      params: components["schemas"]["ImportFileIssueParamView"][];
      /** Format: int64 */
      id: number;
      type:
        | "KEY_IS_NOT_STRING"
        | "MULTIPLE_VALUES_FOR_KEY_AND_LANGUAGE"
        | "VALUE_IS_NOT_STRING"
        | "KEY_IS_EMPTY"
        | "VALUE_IS_EMPTY"
        | "PO_MSGCTXT_NOT_SUPPORTED"
        | "ID_ATTRIBUTE_NOT_PROVIDED"
        | "TARGET_NOT_PROVIDED"
        | "TRANSLATION_TOO_LONG";
    };
    ImportFileIssueParamView: {
      value?: string;
      type:
        | "KEY_NAME"
        | "KEY_ID"
        | "LANGUAGE_ID"
        | "KEY_INDEX"
        | "VALUE"
        | "LINE"
        | "FILE_NODE_ORIGINAL";
    };
    PagedModelEntityModelImportFileIssueView: {
      _embedded?: {
        importFileIssueViews?: components["schemas"]["EntityModelImportFileIssueView"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelImportNamespaceModel: {
      _embedded?: {
        namespaces?: components["schemas"]["ImportNamespaceModel"][];
      };
    };
    ImportNamespaceModel: {
      /**
       * Format: int64
       * @description The id of namespace. When null, namespace doesn't exist and will be created by import.
       * @example 10000048
       */
      id?: number;
      /** @example homepage */
      name?: string;
    };
    PagedModelTranslationCommentModel: {
      _embedded?: {
        translationComments?: components["schemas"]["TranslationCommentModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelTranslationHistoryModel: {
      _embedded?: {
        revisions?: components["schemas"]["TranslationHistoryModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    /** @description Author of the change */
    SimpleUserAccountModel: {
      /** Format: int64 */
      id: number;
      username: string;
      name?: string;
      avatar?: components["schemas"]["Avatar"];
      deleted: boolean;
    };
    TranslationHistoryModel: {
      /** @description Modified fields */
      modifications?: {
        [key: string]: components["schemas"]["PropertyModification"];
      };
      /**
       * Format: int64
       * @description Unix timestamp of the revision
       */
      timestamp?: number;
      author?: components["schemas"]["SimpleUserAccountModel"];
      revisionType: "ADD" | "MOD" | "DEL";
    };
    SelectAllResponse: {
      ids: number[];
    };
    KeyWithTranslationsModel: {
      /**
       * Format: int64
       * @description Id of key record
       */
      keyId?: number;
      /**
       * @description Name of key
       * @example this_is_super_key
       */
      keyName?: string;
      /**
       * Format: int64
       * @description The namespace id of the key
       * @example 100000282
       */
      keyNamespaceId?: number;
      /**
       * @description The namespace of the key
       * @example homepage
       */
      keyNamespace?: string;
      /** @description Tags of key */
      keyTags?: components["schemas"]["TagModel"][];
      /**
       * Format: int64
       * @description Count of screenshots provided for the key
       * @example 1
       */
      screenshotCount?: number;
      /** @description Key screenshots. Not provided when API key hasn't screenshots.view scope permission. */
      screenshots?: components["schemas"]["ScreenshotModel"][];
      /**
       * @description Translations object
       * @example
       *     {
       *       "en": {
       *         "id": 100000003,
       *         "text": "This is super translation!"
       *         "state": "TRANSLATED",
       *         "commentCount": 1
       *       }
       *     }
       */
      translations?: {
        [key: string]: components["schemas"]["TranslationViewModel"];
      };
    };
    KeysWithTranslationsPageModel: {
      _embedded?: {
        keys?: components["schemas"]["KeyWithTranslationsModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
      /** @description Provided languages data */
      selectedLanguages?: components["schemas"]["LanguageModel"][];
      /**
       * @description Cursor to get next data
       * @example eyJrZXlJZCI6eyJkaXJlY3Rpb24iOiJBU0MiLCJ2YWx1ZSI6IjEwMDAwMDAxMjAifX0=
       */
      nextCursor?: string;
    };
    /**
     * @description Translations object
     * @example
     *     {
     *       "en": {
     *         "id": 100000003,
     *         "text": "This is super translation!"
     *         "state": "TRANSLATED",
     *         "commentCount": 1
     *       }
     *     }
     */
    TranslationViewModel: {
      /**
       * Format: int64
       * @description Id of translation record
       */
      id?: number;
      /** @description Translation text */
      text?: string;
      /** @description State of translation */
      state?: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      /** @description Whether base language translation was changed after this translation was updated */
      outdated?: boolean;
      /** @description Was translated using Translation Memory or Machine translation service? */
      auto?: boolean;
      /** @description Which machine translation service was used to auto translate this */
      mtProvider?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | "BAIDU";
      /**
       * Format: int64
       * @description Count of translation comments
       */
      commentCount?: number;
      /**
       * Format: int64
       * @description Count of unresolved translation comments
       */
      unresolvedCommentCount?: number;
      /** @description Was translation memory used to translate this? */
      fromTranslationMemory?: boolean;
    };
    CollectionModelProjectTransferOptionModel: {
      _embedded?: {
        transferOptions?: components["schemas"]["ProjectTransferOptionModel"][];
      };
    };
    ProjectTransferOptionModel: {
      name: string;
      slug: string;
      /** Format: int64 */
      id: number;
    };
    LanguageStatsModel: {
      /** Format: int64 */
      languageId?: number;
      languageTag?: string;
      languageName?: string;
      languageOriginalName?: string;
      languageFlagEmoji?: string;
      /** Format: int64 */
      translatedKeyCount: number;
      /** Format: int64 */
      translatedWordCount: number;
      /** Format: double */
      translatedPercentage: number;
      /** Format: int64 */
      reviewedKeyCount: number;
      /** Format: int64 */
      reviewedWordCount: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      untranslatedKeyCount: number;
      /** Format: int64 */
      untranslatedWordCount: number;
      /** Format: double */
      untranslatedPercentage: number;
    };
    ProjectStatsModel: {
      /** Format: int64 */
      projectId: number;
      /** Format: int32 */
      languageCount: number;
      /** Format: int64 */
      keyCount: number;
      /** Format: int64 */
      baseWordsCount: number;
      /** Format: double */
      translatedPercentage: number;
      /** Format: double */
      reviewedPercentage: number;
      /** Format: int64 */
      membersCount: number;
      /** Format: int64 */
      tagCount: number;
      languageStats: components["schemas"]["LanguageStatsModel"][];
    };
    PagedModelLanguageModel: {
      _embedded?: {
        languages?: components["schemas"]["LanguageModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelProjectInvitationModel: {
      _embedded?: {
        invitations?: components["schemas"]["ProjectInvitationModel"][];
      };
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    PagedModelApiKeyModel: {
      _embedded?: {
        apiKeys?: components["schemas"]["ApiKeyModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PagedModelProjectWithStatsModel: {
      _embedded?: {
        projects?: components["schemas"]["ProjectWithStatsModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    ProjectStatistics: {
      /** Format: int64 */
      projectId: number;
      /** Format: int64 */
      keyCount: number;
      /** Format: int64 */
      languageCount: number;
      translationStatePercentages: { [key: string]: number };
    };
    ProjectWithStatsModel: {
      /** Format: int64 */
      id: number;
      name: string;
      description?: string;
      slug?: string;
      avatar?: components["schemas"]["Avatar"];
      organizationOwner?: components["schemas"]["SimpleOrganizationModel"];
      baseLanguage?: components["schemas"]["LanguageModel"];
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerName?: string;
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerSlug?: string;
      /**
       * @deprecated
       * @description Use organizationOwner field
       */
      organizationOwnerBasePermissions?:
        | "VIEW"
        | "TRANSLATE"
        | "EDIT"
        | "MANAGE";
      organizationRole?: "MEMBER" | "OWNER";
      /**
       * @description Current user's direct permission
       * @example MANAGE
       */
      directPermissions?: "VIEW" | "TRANSLATE" | "EDIT" | "MANAGE";
      computedPermissions?: components["schemas"]["UserPermissionModel"];
      stats: components["schemas"]["ProjectStatistics"];
      languages: components["schemas"]["LanguageModel"][];
    };
    CollectionModelScreenshotModel: {
      _embedded?: {
        screenshots?: components["schemas"]["ScreenshotModel"][];
      };
    };
    PagedModelPatModel: {
      _embedded?: {
        pats?: components["schemas"]["PatModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    PatWithUserModel: {
      user: components["schemas"]["SimpleUserAccountModel"];
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      lastUsedAt?: number;
      description: string;
      /** Format: int64 */
      createdAt: number;
      /** Format: int64 */
      updatedAt: number;
    };
    OrganizationRequestParamsDto: {
      filterCurrentUserOwner: boolean;
      search?: string;
    };
    PagedModelOrganizationModel: {
      _embedded?: {
        organizations?: components["schemas"]["OrganizationModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    CollectionModelOrganizationInvitationModel: {
      _embedded?: {
        organizationInvitations?: components["schemas"]["OrganizationInvitationModel"][];
      };
    };
    UsageModel: {
      /** Format: int64 */
      organizationId: number;
      /**
       * Format: int64
       * @description Current balance of standard credits. Standard credits are refilled every month.
       */
      creditBalance?: number;
      /**
       * Format: int64
       * @description How many credits are included in your current plan.
       */
      includedMtCredits?: number;
      /**
       * Format: int64
       * @description Date when credits were refilled. (In epoch format.)
       */
      creditBalanceRefilledAt?: number;
      /**
       * Format: int64
       * @description Date when credits will be refilled. (In epoch format.)
       */
      creditBalanceNextRefillAt?: number;
      /**
       * Format: int64
       * @description Extra credits, which are neither refilled nor reset every month. These credits are used when there are no standard credits.
       */
      extraCreditBalance?: number;
      /**
       * Format: int64
       * @description How many translations can be stored within your organization.
       */
      translationLimit?: number;
      /**
       * Format: int64
       * @description How many translations are currently stored within your organization.
       */
      currentTranslations?: number;
    };
    PagedModelUserAccountWithOrganizationRoleModel: {
      _embedded?: {
        usersInOrganization?: components["schemas"]["UserAccountWithOrganizationRoleModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    UserAccountWithOrganizationRoleModel: {
      /** Format: int64 */
      id: number;
      name: string;
      username: string;
      organizationRole: "MEMBER" | "OWNER";
    };
    ApiKeyWithLanguagesModel: {
      /**
       * @description Languages for which user has translate permission.
       *
       * If null, all languages are permitted.
       */
      permittedLanguageIds?: number[];
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      projectId: number;
      /** Format: int64 */
      expiresAt?: number;
      /** Format: int64 */
      lastUsedAt?: number;
      description: string;
      username?: string;
      scopes: string[];
      userFullName?: string;
      projectName: string;
    };
    PagedModelUserAccountModel: {
      _embedded?: {
        users?: components["schemas"]["UserAccountModel"][];
      };
      page?: components["schemas"]["PageMetadata"];
    };
    UserTotpDisableRequestDto: {
      password: string;
    };
    DeleteKeysDto: {
      /** @description IDs of keys to delete */
      ids?: number[];
    };
    Link: {
      href?: string;
      hreflang?: string;
      title?: string;
      type?: string;
      deprecation?: string;
      profile?: string;
      name?: string;
      templated?: boolean;
    };
  };
}

export interface operations {
  update_1: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["NamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNamespaceDto"];
      };
    };
  };
  tagKey_1: {
    parameters: {
      path: {
        keyId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TagModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagKeyDto"];
      };
    };
  };
  complexEdit_1: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ComplexEditKeyDto"];
      };
    };
  };
  edit_1: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditKeyDto"];
      };
    };
  };
  /** Resolves translation conflict. The old translation will be overridden. */
  resolveTranslationSetOverride_1: {
    parameters: {
      path: {
        languageId: number;
        translationId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Resolves translation conflict. The old translation will be kept. */
  resolveTranslationSetKeepExisting_1: {
    parameters: {
      path: {
        languageId: number;
        translationId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Resolves all translation conflicts for provided language. The old translations will be overridden. */
  resolveTranslationSetOverride_3: {
    parameters: {
      path: {
        languageId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Resolves all translation conflicts for provided language. The old translations will be kept. */
  resolveTranslationSetKeepExisting_3: {
    parameters: {
      path: {
        languageId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Sets existing language to pair with language to import. Data will be imported to selected existing language when applied. */
  selectExistingLanguage_1: {
    parameters: {
      path: {
        importLanguageId: number;
        existingLanguageId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Resets existing language paired with language to import. */
  resetExistingLanguage_1: {
    parameters: {
      path: {
        importLanguageId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Sets namespace for file to import. */
  selectNamespace_1: {
    parameters: {
      path: {
        fileId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetFileNamespaceRequest"];
      };
    };
  };
  /** Imports the data prepared in previous step */
  applyImport_1: {
    parameters: {
      query: {
        /** Whether override or keep all translations with unresolved conflicts */
        forceMode: string;
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setTranslationState_1: {
    parameters: {
      path: {
        translationId: number;
        state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setState_1: {
    parameters: {
      path: {
        commentId: number;
        state: "RESOLUTION_NOT_NEEDED" | "NEEDS_RESOLUTION" | "RESOLVED";
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  get_4: {
    parameters: {
      path: {
        translationId: number;
        commentId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  update_3: {
    parameters: {
      path: {
        commentId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
  };
  delete_6: {
    parameters: {
      path: {
        commentId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setOutdated_1: {
    parameters: {
      path: {
        translationId: number;
        state: boolean;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  dismissAutoTranslatedState_1: {
    parameters: {
      path: {
        translationId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTranslations_1: {
    parameters: {
      query: {
        /** Cursor to get next data */
        cursor?: string;
        /**
         * Translation state in the format: languageTag,state. You can use this parameter multiple times.
         *
         * When used with multiple states for same language it is applied with logical OR.
         *
         * When used with multiple languages, it is applied with logical AND.
         */
        filterState?: string[];
        /**
         * Languages to be contained in response.
         *
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de)
         */
        languages?: string[];
        /** String to search in key name or translation text */
        search?: string;
        /** Selects key with provided names. Use this param multiple times to fetch more keys. */
        filterKeyName?: string[];
        /** Selects key with provided ID. Use this param multiple times to fetch more keys. */
        filterKeyId?: number[];
        /** Selects only keys, where translation is missing in any language */
        filterUntranslatedAny?: boolean;
        /** Selects only keys, where translation is provided in any language */
        filterTranslatedAny?: boolean;
        /** Selects only keys, where translation is missing in specified language */
        filterUntranslatedInLang?: string;
        /** Selects only keys, where translation is provided in specified language */
        filterTranslatedInLang?: string;
        /** Selects only keys with screenshots */
        filterHasScreenshot?: boolean;
        /** Selects only keys without screenshots */
        filterHasNoScreenshot?: boolean;
        /**
         * Filter namespaces.
         *
         * To filter default namespace, set to empty string.
         */
        filterNamespace?: string[];
        /** Selects only keys with provided tag */
        filterTag?: string[];
        /** Selects only keys, where translation in provided langs is in outdated state */
        filterOutdatedLanguage?: string[];
        /** Selects only keys, where translation in provided langs is not in outdated state */
        filterNotOutdatedLanguage?: string[];
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeysWithTranslationsPageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setTranslations_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  createOrUpdateTranslations_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["SetTranslationsResponseModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTranslationsWithKeyDto"];
      };
    };
  };
  editLanguage_1: {
    parameters: {
      path: {
        languageId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDto"];
      };
    };
  };
  deleteLanguage_3: {
    parameters: {
      path: {
        languageId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /**
   * Uses enabled auto-translation methods.
   * You need to set at least one of useMachineTranslation or useTranslationMemory to true.
   *
   * This will replace the the existing translation with the result obtained from specified source!
   */
  autoTranslate_1: {
    parameters: {
      path: {
        keyId: number;
      };
      query: {
        /**
         * Tags of languages to auto-translate.
         * When no languages provided, it translates only untranslated languages.
         */
        languages?: string[];
        useMachineTranslation?: boolean;
        useTranslationMemory?: boolean;
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getInfo_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelKeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetKeysRequestDto"];
      };
    };
  };
  importKeys_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["KeyImportResolvableResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportKeysResolvableDto"];
      };
    };
  };
  importKeys_3: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImportKeysDto"];
      };
    };
  };
  create_2: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
  };
  getAll_4: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelKeyModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_3: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["KeyWithDataModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateKeyDto"];
      };
    };
  };
  delete_4: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteKeysDto"];
      };
    };
  };
  /** Prepares provided files to import. */
  addFiles_1: {
    parameters: {
      query: {
        /** When importing structured JSONs, you can set the delimiter which will be used in names of improted keys. */
        structureDelimiter?: string;
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ImportAddFilesResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          files: string[];
        };
      };
    };
  };
  /** Deletes prepared import data. */
  cancelImport_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  export_1: {
    parameters: {
      query: {
        /**
         * Languages to be contained in export.
         *
         * If null, all languages are exported
         */
        languages?: string[];
        /** Format to export to */
        format?: "JSON" | "XLIFF";
        /**
         * Delimiter to structure file content.
         *
         * e.g. For key "home.header.title" would result in {"home": {"header": "title": {"Hello"}}} structure.
         *
         * When null, resulting file won't be structured.
         */
        structureDelimiter?: string;
        /** Filter key IDs to be contained in export */
        filterKeyId?: number[];
        /** Filter key IDs not to be contained in export */
        filterKeyIdNot?: number[];
        /** Filter keys tagged by */
        filterTag?: string;
        /** Filter keys with prefix */
        filterKeyPrefix?: string;
        /** Filter translations with state. By default, everything except untranslated is exported. */
        filterState?: ("UNTRANSLATED" | "TRANSLATED" | "REVIEWED")[];
        /** Select one ore multiple namespaces to export */
        filterNamespace?: string[];
        /**
         * If false, it doesn't return zip of files, but it returns single file.
         *
         * This is possible only when single language is exported. Otherwise it returns "400 - Bad Request" response.
         */
        zip?: boolean;
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  exportPost_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportParams"];
      };
    };
  };
  getAll_6: {
    parameters: {
      path: {
        translationId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create_5: {
    parameters: {
      path: {
        translationId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentDto"];
      };
    };
  };
  create_7: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["TranslationWithCommentModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslationCommentWithLangKeyDto"];
      };
    };
  };
  suggestTranslationMemory_1: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationMemoryItemModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
  };
  suggestMachineTranslations_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["SuggestResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestRequestDto"];
      };
    };
  };
  getAll_8: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createLanguage_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageDto"];
      };
    };
  };
  getKeyScreenshots: {
    parameters: {
      path: {
        keyId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelScreenshotModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  uploadScreenshot: {
    parameters: {
      path: {
        keyId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["ScreenshotModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          screenshot: string;
          info?: components["schemas"]["ScreenshotInfoDto"];
        };
      };
    };
  };
  upload: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "*/*": components["schemas"]["UploadedImageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          image: string;
          info?: components["schemas"]["ImageUploadInfoDto"];
        };
      };
    };
  };
  getUsedNamespaces_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelUsedNamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAll_2: {
    parameters: {
      query: {
        search?: string;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTagModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllNamespaces_1: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelNamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getByName_1: {
    parameters: {
      path: {
        name: string;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["NamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  searchForKey_1: {
    parameters: {
      query: {
        /** Search query */
        search: string;
        /** Language to search in */
        languageTag?: string;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelKeySearchSearchResultModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getActivity_1: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["PagedModelProjectActivityModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Returns translations prepared to import. */
  getImportTranslations_1: {
    parameters: {
      path: {
        languageId: number;
      };
      query: {
        /** Whether only translations, which are in conflict with existing translations should be returned */
        onlyConflicts: string;
        /** Whether only translations with unresolved conflictswith existing translations should be returned */
        onlyUnresolved: string;
        /** String to search in translation text or key */
        search?: string;
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelImportTranslationModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Returns language prepared to import. */
  getImportLanguage_1: {
    parameters: {
      path: {
        languageId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ImportLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Deletes language prepared to import. */
  deleteLanguage_1: {
    parameters: {
      path: {
        languageId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Returns issues for uploaded file. */
  getImportFileIssues_1: {
    parameters: {
      path: {
        importFileId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelEntityModelImportFileIssueView"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Returns the result of preparation. */
  getImportResult_1: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelImportLanguageModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  /** Returns all existing and imported namespaces */
  getAllNamespaces_3: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["CollectionModelImportNamespaceModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getTranslationHistory_1: {
    parameters: {
      path: {
        translationId: number;
      };
      query: {
        /** Zero-based page index (0..N) */
        page?: number;
        /** The size of the page to be returned */
        size?: number;
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagedModelTranslationHistoryModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllTranslations_1: {
    parameters: {
      path: {
        /** Comma-separated language tags to return translations in. */
        languages: string[];
      };
      query: {
        /** Namespace to return */
        ns?: string;
        /**
         * Delimiter to structure response content.
         *
         * e.g. For key "home.header.title" would result in {"home": {"header": {"title": "Hello"}}} structure.
         *
         * When null, resulting file will be a flat key-value object.
         */
        structureDelimiter?: string;
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getSelectAllKeyIds_1: {
    parameters: {
      query: {
        /**
         * Translation state in the format: languageTag,state. You can use this parameter multiple times.
         *
         * When used with multiple states for same language it is applied with logical OR.
         *
         * When used with multiple languages, it is applied with logical AND.
         */
        filterState?: string[];
        /**
         * Languages to be contained in response.
         *
         * To add multiple languages, repeat this param (eg. ?languages=en&languages=de)
         */
        languages?: string[];
        /** String to search in key name or translation text */
        search?: string;
        /** Selects key with provided names. Use this param multiple times to fetch more keys. */
        filterKeyName?: string[];
        /** Selects key with provided ID. Use this param multiple times to fetch more keys. */
        filterKeyId?: number[];
        /** Selects only keys, where translation is missing in any language */
        filterUntranslatedAny?: boolean;
        /** Selects only keys, where translation is provided in any language */
        filterTranslatedAny?: boolean;
        /** Selects only keys, where translation is missing in specified language */
        filterUntranslatedInLang?: string;
        /** Selects only keys, where translation is provided in specified language */
        filterTranslatedInLang?: string;
        /** Selects only keys with screenshots */
        filterHasScreenshot?: boolean;
        /** Selects only keys without screenshots */
        filterHasNoScreenshot?: boolean;
        /**
         * Filter namespaces.
         *
         * To filter default namespace, set to empty string.
         */
        filterNamespace?: string[];
        /** Selects only keys with provided tag */
        filterTag?: string[];
        /** Selects only keys, where translation in provided langs is in outdated state */
        filterOutdatedLanguage?: string[];
        /** Selects only keys, where translation in provided langs is not in outdated state */
        filterNotOutdatedLanguage?: string[];
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["SelectAllResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getProjectDailyActivity_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/hal+json": { [key: string]: number };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getProjectStats_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/hal+json": components["schemas"]["ProjectStatsModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getCurrent_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["ApiKeyWithLanguagesModel"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  doExportJsonZip_1: {
    parameters: {
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/zip": components["schemas"]["StreamingResponseBody"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeTag_1: {
    parameters: {
      path: {
        keyId: number;
        tagId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_2: {
    parameters: {
      path: {
        ids: number[];
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteScreenshots: {
    parameters: {
      path: {
        ids: number[];
        keyId: number;
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete_9: {
    parameters: {
      path: {
        ids: number[];
      };
      query: {
        /** API key provided via query parameter. Will be deprecated in the future. */
        ak?: string;
      };
      header: {
        /** API key provided via header. Safer since headers are not stored in server logs. */
        "X-API-Key"?: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "*/*": string;
        };
      };
      /** Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}

export interface external {}
